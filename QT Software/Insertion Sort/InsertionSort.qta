# Does insertion sort on the given List.


# Jump to start
mem > PC
$Start


# -------- Data Segment --------
# The list to sort
-1
0
:List:
4
8
5
1
3
25
15
8
-4
99
:List.end:
0
-1

# The address we're considering going up
:topAdr:
$List

# The current address we're considering going down
:downAdr:
0

# Temporary memory space
:temp:
0


# -------- Code Segment --------
:Start:
	mem > A		# topAdr++
	$topAdr
	[A] > B
	B++
	B > [A]
	
	mem > A		# Continue if topAdr < List.end, end if not
	$List.end
	cmp B-A
	mem > PCif-
	$S.Ct1
		mem > PC
		$Done
	:S.Ct1:
	
	B > A		# Do [topAdr] COMPARE [topAdr - 1] (NOTE THE BRACKETS!!!)
	A--
	[A] > A
	swp
	[A] > A
	cmp A-B
	
	mem > PCif-		# Continue if [topAdr] < [topAdr - 1], loop if not
	$S.Ct2
		mem > PC
		$Start
	:S.Ct2:
	
	mem > A		# downAdr = topAdr
	$topAdr
	[A] > B
	mem > A
	$downAdr
	B > [A]
	
	:Loop2:
		mem > A		# temp = [downAdr]
		$downAdr
		[A] > A
		[A] > B
		mem > A
		$temp
		B > [A]
		
		mem > A 	# [downAdr] = [downAdr - 1] (really getting wacky with the pointers now)
		$downAdr
		[A] > A
		A--
		[A] > B
		mem > A
		$downAdr
		[A] > A
		B > [A]
		
		mem > A 	# Now do [downAdr - 1] = temp (still super wacky with the pointers)
		$temp
		[A] > B
		mem > A
		$downAdr
		[A] > A
		A--
		B > [A]
		
		A > B		# downAdr = downAdr - 1
		mem > A
		$downAdr
		B > [A]
		
		mem > A
		$List
		cmp A-B
		mem > PCifZ		# Loop if the new downAdr == $List
		$Start
		
		B > A		# do [downAdr] CMP [downAdr - 1]
		A--
		[A] > A
		swp
		[A] > A
		cmp A-B
		
		mem > PCif-		# Inner loop if [downAdr] < [downAdr - 1], otherwise go to start loop.
		$Loop2
		mem > PC
		$Start

:Done:
HLT
