# Does insertion sort on the given list.


# Jump to start
mem > PC
$Start


# -------- Data Segment --------

# The list to sort
:List:
4
8
5
1
3
:List.end:

# The address we're considering going up
:topAddress:
$List

# The current address we're considering going down
:downAddress:
0

# Temporary memory space
:temp:
0



# -------- Code Segment --------
:Start:
	mem > A		# Get topAddress value
	$topAddress
	[A] > A
	
	mem > B		# Increment value
	1
	A+B > B
	
	mem > A		# Store value back in topAddress
	$topAddress
	B > [A]
	
	B > A		# Do topAddress COMPARE List.end
	mem > B		
	$List.end
	A-B > B +cmp
	
	mem > PCif-		# Continue if topAddress < List.end, end if not
	$S.Continue
		mem > PC
		$Done
	:S.Continue:
	
	mem > A		# Get top_address in temp
	$topAddress
	[A] > B
	mem > A
	$temp
	B > [A]
	
	B > A		# Get [top_address - 1] in B (NOTE THE BRACKETS)
	mem > B
	1
	A-B > A
	[A] > B
	
	mem > A		# Use temp to get [top_address] in A and do [top_address] COMPARE [top_address - 1]
	$temp
	[A] > A
	[A] > A
	
	A-B > A
	
	# OK OK OK this has officially gone too far.
	# Clearly this CPU simply CANNOT handle addresses well.
	# I'd almost rather write this in BF.
	# Given the program memory size of 256 words, this program in its complete form may be too big!
	# Insertion sort! Too big! Wow!
	
	# As a processor architecture enthusiast, this does have me thinking quite a bit about ISA design.

:Done:
HLT
	
	
	