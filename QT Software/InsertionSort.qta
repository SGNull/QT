# Does insertion sort on the given list.


# Jump to start
mem > PC
$Start


# -------- Data Segment --------

# The list to sort
:List:
4
8
5
1
3
:List.end:

# The address we're considering going up
:topAddress:
$List

# The current address we're considering going down
:downAddress:
0

# Temporary memory space
:temp:
0



# -------- Code Segment --------
:Start:
	mem > A		# Increment topAddress
	$topAddress
	[A] > B
	B++
	B > [A]
	
	mem > A		# Continue if topAddress < List.end, end if not
	$List.end
	cmp B-A
	mem > PCif-
	$S.Continue
		mem > PC
		$Done
	:S.Continue:
	
	B > A		# Do [topAddress] COMPARE [topAddress - 1]
	A--
	[A] > A
	swp
	[A] > A
	cmp A-B
	
	# So far, this is WAY better than before.

:Done:
HLT
	
	
	